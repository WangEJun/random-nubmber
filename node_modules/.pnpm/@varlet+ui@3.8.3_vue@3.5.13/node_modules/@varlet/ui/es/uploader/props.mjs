import { defineListenerProp } from "../utils/components.mjs";
const props = {
  modelValue: {
    type: Array,
    default: () => []
  },
  accept: {
    type: String,
    default: "image/*"
  },
  capture: {
    type: [String, Boolean],
    default: void 0
  },
  multiple: Boolean,
  readonly: Boolean,
  disabled: Boolean,
  elevation: {
    type: [Boolean, Number, String],
    default: true
  },
  resolveType: {
    type: String,
    default: "default"
  },
  removable: {
    type: Boolean,
    default: true
  },
  maxlength: [Number, String],
  maxsize: [Number, String],
  previewed: {
    type: Boolean,
    default: true
  },
  ripple: {
    type: Boolean,
    default: true
  },
  validateTrigger: {
    type: Array,
    default: () => ["onChange", "onRemove"]
  },
  rules: [Array, Function, Object],
  hideList: Boolean,
  preventDefaultPreview: Boolean,
  onClickAction: defineListenerProp(),
  onBeforeFilter: defineListenerProp(),
  onBeforeRead: defineListenerProp(),
  onAfterRead: defineListenerProp(),
  onBeforeRemove: defineListenerProp(),
  onRemove: defineListenerProp(),
  onOversize: defineListenerProp(),
  onPreview: defineListenerProp(),
  "onUpdate:modelValue": defineListenerProp()
};
export {
  props
};
